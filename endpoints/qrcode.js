const wppconnect = require('@wppconnect-team/wppconnect');
const fs = require('fs');
const path = require('path');
const { acessarServidor } = require("../utils/puppeteer");

let tentativaContador = 0; // Contador para monitorar tentativas de reconex√£o
const MAX_TENTATIVAS = 6; // Limite m√°ximo de tentativas

let client = null; // Vari√°vel global para o cliente do WhatsApp
let execucaoEmAndamento = {}; // Objeto para rastrear execu√ß√µes em andamento de sess√µes

// Fun√ß√£o para enviar QR para o servidor PHP
async function enviarQrParaServidor(nome, base64) {
    try {
        await acessarServidor("salvar_qrcod.php", {
            method: "POST",
            data: { nome, base64 },
        });
    } catch (err) {
        console.error('‚ùå Erro ao enviar QR para o servidor:', err);
    }
}

// Fun√ß√£o que cria o cliente WPPConnect
const createClient = async (nomeSessao) => {
    if (client) {
        console.log('üîÑ Reutilizando cliente existente...');
        return client;
    }

    console.log(`üîß Criando cliente para a sess√£o: ${nomeSessao}`);
    client = await wppconnect.create({
        session: nomeSessao,
        puppeteerOptions: {
            headless: true,
            args: ['--no-sandbox', '--disable-setuid-sandbox'] // Necess√°rio em ambientes sem interface gr√°fica
        },
        autoClose: 0, // Impede o fechamento autom√°tico do cliente
    });

    return client;
};

// Fun√ß√£o que gera o QR Code para autentica√ß√£o
const generateQRCode = async (req, res) => {
    const nomeSessao = req.params.nome;

    // Verifica se o nome da sess√£o foi passado
    if (!nomeSessao) {
        return res.status(400).json({ success: false, error: 'Nome da sess√£o n√£o fornecido' });
    }

    // Verifica se j√° h√° uma execu√ß√£o em andamento para a mesma sess√£o
    if (execucaoEmAndamento[nomeSessao]) {
        return res.status(400).json({ success: false, error: 'J√° existe uma execu√ß√£o em andamento para essa sess√£o.' });
    }

    // Marca que h√° uma execu√ß√£o em andamento para a sess√£o
    execucaoEmAndamento[nomeSessao] = true;

    try {
        // Cria ou reutiliza o cliente do WhatsApp
        client = await createClient(nomeSessao);

        // Evento para gerar e enviar QR Code
        client.on('qr', async (qrCode) => {
            console.log('üì∏ QR Code gerado!');

            // Envia o QR Code como base64 para o servidor PHP
            await enviarQrParaServidor(nomeSessao, qrCode);

            // Envia o QR Code como base64 para o cliente
            res.json({
                success: true,
                qrcode: qrCode,
                message: 'QR Code gerado com sucesso!',
            });
        });

        // Monitoramento do status da conex√£o
        client.on('status', async (status) => {
            console.log(`üîÑ Status da sess√£o: ${status}`);

            // Verifica se o QR Code expirou ou se houve perda de conex√£o
            if (status === 'QRCODE' || status === 'CONNECTION_LOST') {
                console.log('‚ö†Ô∏è QR Code expirado ou conex√£o perdida.');

                tentativaContador++;

                if (tentativaContador >= MAX_TENTATIVAS) {
                    console.log('‚ùå N√∫mero m√°ximo de tentativas alcan√ßado. Excluindo sess√£o...');
                    try {
                        client.close(); // Fecha a sess√£o
                        fs.unlinkSync(path.join(__dirname, `${nomeSessao}.json`)); // Exclui o arquivo da sess√£o (se houver)
                    } catch (err) {
                        console.error('‚ùå Erro ao excluir sess√£o:', err);
                    }
                    // Marca a execu√ß√£o como finalizada
                    execucaoEmAndamento[nomeSessao] = false;
                    return res.status(500).json({ success: false, error: 'Erro ao conectar ap√≥s v√°rias tentativas. Sess√£o exclu√≠da.' });
                }

                console.log(`üí° Tentativa ${tentativaContador}/${MAX_TENTATIVAS} para reconectar...`);

                // Tenta gerar novo QR Code (manter a sess√£o aberta)
                client.emit('qr', client.getQRCode());

                // Envia o novo QR Code para o servidor PHP
                await enviarQrParaServidor(nomeSessao, client.getQRCode());
            } else if (status === 'CONNECTED') {
                console.log('‚úîÔ∏è Conex√£o estabelecida com sucesso!');
                tentativaContador = 0; // Reseta o contador de tentativas

                // Obt√©m o token de sess√£o do navegador
                const tokens = await client.getSessionTokenBrowser();
                
                // Envia os dados ao servidor
                await acessarServidor("atualizar_sessao.php", {
                    method: "POST",
                    data: { nome: nomeSessao, dados: JSON.stringify({ conectado: true, tokens }) },
                });

                // Marca a execu√ß√£o como finalizada
                execucaoEmAndamento[nomeSessao] = false;
            }
        });

    } catch (error) {
        console.error('‚ùå Erro ao conectar ao WhatsApp:', error);
        res.status(500).json({ success: false, error: 'Erro ao conectar ao WhatsApp' });

        // Marca a execu√ß√£o como finalizada
        execucaoEmAndamento[nomeSessao] = false;
    }
};

module.exports = generateQRCode;
