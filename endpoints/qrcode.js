 const fs = require("fs");
const path = require("path");
const { createClient } = require("@wppconnect-team/wppconnect");
const { acessarServidor } = require("../utils/puppeteer"); // caminho corrigido

let sessions = {};
let locks = {};

function log(msg) {
  console.log(`[${new Date().toISOString()}] üîπ [QR] ${msg}`);
}

async function cleanupSession(nome) {
  if (sessions[nome]) {
    try {
      if (sessions[nome].client) {
        await sessions[nome].client.close();
        log(`WppConnect fechado para sess√£o "${nome}"`);
      }
    } catch (err) {
      log(`Erro ao fechar cliente da sess√£o "${nome}": ${err.message}`);
    }
    delete sessions[nome];
    log(`Sess√£o "${nome}" removida da mem√≥ria`);
  }
}

async function handleQRCode(req, res) {
  const nome = req.params.nome;
  if (!nome) return res.json({ success: false, error: "Nome da sess√£o n√£o enviado" });

  if (locks[nome]) return res.json({ success: false, error: "J√° existe uma opera√ß√£o em andamento para esta sess√£o" });
  locks[nome] = true;

  try {
    // üîé Verificar se sess√£o existe no servidor PHP
    const resposta = await acessarServidor("listar_sessoes.php", { method: "GET" });
    if (!resposta.success || !resposta.sessoes.some(s => s.nome === nome)) {
      delete locks[nome];
      return res.json({ success: false, error: "Sess√£o n√£o encontrada" });
    }

    // Se j√° existe cliente em mem√≥ria
    if (sessions[nome] && sessions[nome].client) {
      const state = await sessions[nome].client.getConnectionState();
      if (state === "CONNECTED") {
        delete locks[nome];
        return res.json({ success: true, message: "Sess√£o j√° conectada" });
      }

      if (sessions[nome].qrStatus === "valid") {
        delete locks[nome];
        return res.json({ success: true, message: "QR code atual ainda v√°lido" });
      }

      if (sessions[nome].qrStatus === "expired") {
        log(`‚ôªÔ∏è Gerando novo QR para sess√£o existente "${nome}"...`);
        try {
          const base64Qr = await sessions[nome].client.getQrCode();
          const resp = await acessarServidor("Imagem_qrcode.php", {
            method: "POST",
            data: { nome, qrcode: base64Qr },
          });

          if (resp.success && resp.url) {
            sessions[nome].qrStatus = "valid";
            sessions[nome].qrGeneratedAt = Date.now();
            log(`‚úÖ Novo QR salvo: ${resp.url}`);
            delete locks[nome];
            return res.json({
              success: true,
              message: "Novo QR code gerado com sucesso",
              qrUrl: resp.url,
            });
          } else {
            throw new Error(resp.error || "Erro ao salvar novo QR");
          }
        } catch (err) {
          log(`‚ùå Erro ao gerar novo QR: ${err.message}`);
          delete locks[nome];
          return res.json({ success: false, error: "Erro ao gerar novo QR" });
        }
      }
    }

    // Criar nova sess√£o
    log(`Iniciando cria√ß√£o da sess√£o "${nome}"...`);

    const client = await createClient({
      session: nome,
      puppeteerOptions: {
        headless: true,
        args: ["--no-sandbox", "--disable-setuid-sandbox", "--disable-dev-shm-usage"],
      },

      catchQR: async (base64Qr) => {
        try {
          log(`QR gerado para sess√£o "${nome}"`);
          const resp = await acessarServidor("Imagem_qrcode.php", {
            method: "POST",
            data: { nome, qrcode: base64Qr },
          });

          if (resp.success && resp.url) {
            sessions[nome].qrStatus = "valid";
            sessions[nome].qrGeneratedAt = Date.now();
            log(`‚úÖ QR salvo em: ${resp.url}`);

            res.json({
              success: true,
              message: "QR code gerado com sucesso",
              qrUrl: resp.url,
            });

            // Expira em 5 min
            setTimeout(async () => {
              if (
                sessions[nome] &&
                sessions[nome].qrStatus === "valid" &&
                Date.now() - sessions[nome].qrGeneratedAt >= 5 * 60 * 1000
              ) {
                log(`‚è≥ QR da sess√£o "${nome}" expirou ap√≥s 5 minutos. Encerrando sess√£o...`);
                await cleanupSession(nome);
              }
            }, 5 * 60 * 1000 + 1000);
          } else {
            throw new Error(resp.error || "Erro salvando QR no servidor PHP");
          }
        } catch (err) {
          log(`‚ùå Erro ao salvar QR: ${err.message}`);
          sessions[nome].qrStatus = "expired";
          res.json({ success: false, error: "Erro ao salvar QR code" });
        }
      },

      statusFind: async (statusSession) => {
        log(`Status da sess√£o "${nome}" => ${statusSession}`);
        try {
          if (statusSession === "isLogged" || statusSession === "CONNECTED") {
            const tokens = await client.getSessionTokenBrowser();
            await acessarServidor("atualizar_sessao.php", {
              method: "POST",
              data: { nome, dados: JSON.stringify({ conectado: true, tokens }) },
            });
            await cleanupSession(nome);
          }

          if (statusSession === "qrReadSuccess") {
            log(`QR da sess√£o "${nome}" escaneado, aguardando conex√£o...`);
          }

          if (statusSession === "qrReadFail" || statusSession === "qrCodeSessionInvalid") {
            sessions[nome].qrStatus = "expired";
            log(`QR da sess√£o "${nome}" expirou ou inv√°lido`);
          }
        } catch (err) {
          log(`‚ùå Erro monitorando status: ${err.message}`);
          await cleanupSession(nome);
        }
      },
    });

    sessions[nome] = { client, qrStatus: "pending", qrGeneratedAt: null };
  } catch (err) {
    log(`‚ùå Erro geral: ${err.message}`);
    res.json({ success: false, error: err.message });
    await cleanupSession(nome);
  } finally {
    delete locks[nome];
  }
}

module.exports = { handleQRCode };
