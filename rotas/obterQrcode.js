const fs = require("fs");
const path = require("path");
const { acessarServidor } = require("../utils/puppeteer");
const { verificarOuCriarSessao } = require("../utils/gerenciarRender");

module.exports = async (req, res) => {
  try {
    const { nome } = req.params;
    console.log(`[${new Date().toISOString()}] üîπ Solicita√ß√£o QR recebida para sess√£o "${nome}"`);

    // 1Ô∏è‚É£ Verifica se a sess√£o existe no servidor
    const respostaServidor = await acessarServidor("listar_sessoes.php");
    const sessaoServidor = respostaServidor.sessoes?.find(s => s.nome === nome);

    if (!sessaoServidor) {
      console.log(`[${new Date().toISOString()}] ‚ùå Sess√£o "${nome}" n√£o encontrada no servidor`);
      return res.json({ success: false, error: "Sess√£o n√£o encontrada no servidor" });
    }

    // 2Ô∏è‚É£ Verifica/Cria sess√£o no Node (Render)
    const client = await verificarOuCriarSessao(nome);

    // 3Ô∏è‚É£ Prepara pasta do QR
    const pastaQr = path.join(__dirname, "../qrcodes");
    if (!fs.existsSync(pastaQr)) fs.mkdirSync(pastaQr);
    const caminhoQr = path.join(pastaQr, `${nome}.png`);

    // 4Ô∏è‚É£ Verifica se j√° existe QR salvo e se ainda √© v√°lido
    if (fs.existsSync(caminhoQr)) {
      const status = await client.getConnectionState();
      if (status === "CONNECTED" || status === "PAIRING") {
        console.log(`[${new Date().toISOString()}] ‚úÖ QR atual da sess√£o "${nome}" ainda v√°lido`);
        return res.json({ success: true, message: "QR atual ainda v√°lido" });
      }
      fs.unlinkSync(caminhoQr); // remove expirado
      console.log(`[${new Date().toISOString()}] ‚ö†Ô∏è QR expirado removido para sess√£o "${nome}"`);
    }

    // 5Ô∏è‚É£ Gera novo QR
    const qrCode = await client.getQrCode();
    fs.writeFileSync(caminhoQr, qrCode.replace(/^data:image\/png;base64,/, ""), "base64");
    console.log(`[${new Date().toISOString()}] üÜï Novo QR gerado para sess√£o "${nome}"`);

    // Retorna QR PNG para HTML
    res.sendFile(caminhoQr);

    // 6Ô∏è‚É£ Monitora sess√£o para enviar dados ao PHP ap√≥s conex√£o
    client.onStateChange(async (state) => {
      if (state === "CONNECTED") {
        console.log(`[${new Date().toISOString()}] üéâ Sess√£o "${nome}" conectada com sucesso`);
        try {
          const dadosSessao = await client.getSessionTokenBrowser();

          // Envia dados atualizados para o servidor PHP
          const respostaAtualizacao = await acessarServidor("atualizar_sessao.php", {
            method: "POST",
            data: { nome, dados: JSON.stringify(dadosSessao) }
          });

          if (respostaAtualizacao.success) {
            console.log(`[${new Date().toISOString()}] ‚úÖ Dados da sess√£o "${nome}" atualizados no servidor`);
          } else {
            console.error(`[${new Date().toISOString()}] ‚ùå Erro ao atualizar sess√£o "${nome}": ${respostaAtualizacao.error}`);
          }
        } catch (err) {
          console.error(`[${new Date().toISOString()}] ‚ùå Erro ao obter/enviar dados da sess√£o "${nome}": ${err.message}`);
        }
      }
    });

  } catch (err) {
    console.error(`[${new Date().toISOString()}] ‚ùå Erro na requisi√ß√£o QR para sess√£o "${req.params.nome}": ${err.message}`);
    res.json({ success: false, error: err.message });
  }
};

