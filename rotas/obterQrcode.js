const fs = require("fs");
const path = require("path");
const { acessarServidor } = require("../utils/puppeteer");
const { verificarOuCriarSessao } = require("../utils/gerenciarRender");

module.exports = async (req, res) => {
  const nome = req.params.nome;
  if (!nome) {
    console.log(`[${new Date().toISOString()}] ‚ùå Requisi√ß√£o sem nome de sess√£o`);
    return res.json({ success: false, error: "Nome da sess√£o n√£o passada" });
  }

  try {
    // 1Ô∏è‚É£ Verificar se a sess√£o existe no servidor
    console.log(`[${new Date().toISOString()}] üîπ Acessando servidor para listar sess√µes`);
    const respostaServidor = await acessarServidor("listar_sessoes.php");
    const sessao = respostaServidor.sessoes?.find(s => s.nome === nome);
    if (!sessao) {
      console.log(`[${new Date().toISOString()}] ‚ùå Sess√£o "${nome}" n√£o encontrada no servidor`);
      return res.json({ success: false, error: "Sess√£o n√£o encontrada" });
    }

    // 2Ô∏è‚É£ Criar ou recuperar sess√£o WPPConnect
    const client = await verificarOuCriarSessao(nome);

    // 3Ô∏è‚É£ Preparar pasta QRCode
    const pastaQr = path.join(__dirname, "../qrcodes");
    if (!fs.existsSync(pastaQr)) fs.mkdirSync(pastaQr);
    const caminhoQr = path.join(pastaQr, `${nome}.png`);

    // 4Ô∏è‚É£ Verifica se QR atual existe
    if (fs.existsSync(caminhoQr)) {
      const status = await client.getConnectionState();

      if (status === "CONNECTED") {
        const tokens = await client.getSessionTokenBrowser();
        await acessarServidor("atualizar_sessao.php", {
          method: "POST",
          data: { nome, dados: JSON.stringify({ conectado: true, tokens }) },
        });
        console.log(`[${new Date().toISOString()}] ‚úÖ Sess√£o "${nome}" conectada`);
        console.log(`[${new Date().toISOString()}] üîó QR existente: /qrcodes/${nome}.png`);
        return res.json({ success: true, message: "Sess√£o conectada", qrUrl: `/qrcodes/${nome}.png` });
      }

      if (status === "PAIRING") {
        console.log(`[${new Date().toISOString()}] ‚ÑπÔ∏è QR da sess√£o "${nome}" ainda v√°lido`);
        console.log(`[${new Date().toISOString()}] üîó Link QR: /qrcodes/${nome}.png`);
        return res.json({ success: true, message: "QR atual ainda v√°lido", qrUrl: `/qrcodes/${nome}.png` });
      }

      // QR expirado ‚Üí apagar
      fs.unlinkSync(caminhoQr);
      console.log(`[${new Date().toISOString()}] ‚ö†Ô∏è QR expirado apagado: /qrcodes/${nome}.png`);
    }

    // 5Ô∏è‚É£ Gerar novo QR apenas se n√£o existe ou expirou
    const qrCode = await client.getQrCode();
    fs.writeFileSync(caminhoQr, qrCode.replace(/^data:image\/png;base64,/, ""), "base64");
    console.log(`[${new Date().toISOString()}] ‚úÖ Novo QR gerado para a sess√£o "${nome}"`);
    console.log(`[${new Date().toISOString()}] üîó Link QR: /qrcodes/${nome}.png`);

    // 6Ô∏è‚É£ Retornar QR novo
    res.json({ success: true, message: "Novo QRCode gerado", qrUrl: `/qrcodes/${nome}.png` });

    // 7Ô∏è‚É£ Monitorar estado da sess√£o
    client.onStateChange(async (state) => {
      if (state === "CONNECTED") {
        try {
          const tokens = await client.getSessionTokenBrowser();
          await acessarServidor("atualizar_sessao.php", {
            method: "POST",
            data: { nome, dados: JSON.stringify({ conectado: true, tokens }) },
          });
          console.log(`[${new Date().toISOString()}] ‚úÖ Sess√£o "${nome}" conectada e dados enviados ao servidor`);
        } catch (err) {
          console.error(`[${new Date().toISOString()}] ‚ùå Erro ao atualizar sess√£o (${nome}): ${err.message}`);
        }
      }
    });

  } catch (err) {
    console.error(`[${new Date().toISOString()}] ‚ùå Erro obter QRCode (${nome}):`, err.message);
    res.json({ success: false, error: err.message });
  }
};

