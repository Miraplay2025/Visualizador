const fs = require("fs");
const path = require("path");
const { createClient } = require("@wppconnect-team/wppconnect");
const { acessarServidor } = require("./utils/puppeteer");

// Sess√µes tempor√°rias e travas
let sessions = {};
let locks = {};

function log(msg) {
  console.log(`[${new Date().toISOString()}] üîπ [QR] ${msg}`);
}

async function handleQRCode(req, res) {
  const nome = req.params.nome;
  if (!nome) return res.json({ success: false, error: "Nome da sess√£o n√£o enviado" });

  if (locks[nome]) return res.json({ success: false, error: "J√° existe uma opera√ß√£o em andamento para esta sess√£o" });
  locks[nome] = true;

  const sessionDir = path.join(__dirname, "qrcodes");
  if (!fs.existsSync(sessionDir)) fs.mkdirSync(sessionDir);
  const qrPath = path.join(sessionDir, `${nome}.png`);

  try {
    // 1Ô∏è‚É£ Verifica se a sess√£o existe no servidor
    const resposta = await acessarServidor("listar_sessoes.php", { method: "GET" });
    if (!resposta.success || !resposta.sessoes.some(s => s.nome === nome)) {
      return res.json({ success: false, error: "Sess√£o n√£o encontrada" });
    }

    // 2Ô∏è‚É£ Se j√° existe sess√£o tempor√°ria
    if (sessions[nome] && sessions[nome].client) {
      const state = await sessions[nome].client.getConnectionState();
      if (state === "CONNECTED") return res.json({ success: true, message: "Sess√£o j√° conectada" });
      if (sessions[nome].qrStatus === "valid") return res.json({ success: true, message: "QR code atual ainda v√°lido", qrUrl: `/qrcodes/${nome}.png` });
      if (sessions[nome].qrStatus === "expired") {
        if (fs.existsSync(qrPath)) fs.unlinkSync(qrPath);
        delete sessions[nome];
      }
    }

    // 3Ô∏è‚É£ Criar nova sess√£o tempor√°ria
    sessions[nome] = { client: null, qrPath, qrStatus: "pending" };

    const client = await createClient({
      session: nome,
      puppeteerOptions: {
        headless: true,
        args: ["--no-sandbox","--disable-setuid-sandbox","--disable-setuid-sandbox"]
      },

      // Callback para gerar QR code
      catchQR: async (base64Qr) => {
        try {
          const qrBuffer = Buffer.from(base64Qr.replace("data:image/png;base64,", ""), "base64");
          fs.writeFileSync(qrPath, qrBuffer);
          sessions[nome].qrStatus = "valid";

          log(`QR code gerado para sess√£o "${nome}"`);
          res.json({ success: true, message: "QR code gerado", qrUrl: `/qrcodes/${nome}.png` });
        } catch (err) {
          log(`‚ùå Erro ao salvar QR: ${err.message}`);
          res.json({ success: false, error: "Falha ao gerar QR" });
          cleanupSession(nome, qrPath);
        }
      },

      // Callback para monitorar status
      statusFind: async (statusSession) => {
        log(`Status da sess√£o "${nome}" => ${statusSession}`);
        try {
          if (statusSession === "isLogged" || statusSession === "CONNECTED") {
            const tokens = await client.getSessionTokenBrowser();
            
            // Atualiza sess√£o no servidor
            const updateResp = await acessarServidor("atualizar_sessao.php", {
              method: "POST",
              data: { nome, dados: JSON.stringify({ conectado: true, tokens }) },
            });

            // Retorna resposta final ao HTML
            log(`Sess√£o "${nome}" conectada. updateResp => ${JSON.stringify(updateResp)}`);
            if (updateResp.success) {
              // Remove sess√£o tempor√°ria e QR code AP√ìS enviar a resposta
              cleanupSession(nome, qrPath);
            }
          }

          if (statusSession === "qrReadSuccess") log(`QR da sess√£o "${nome}" escaneado, aguardando conex√£o...`);
          if (statusSession === "qrReadFail" || statusSession === "qrCodeSessionInvalid") {
            sessions[nome].qrStatus = "expired";
            log(`QR da sess√£o "${nome}" expirou ou inv√°lido`);
          }
        } catch (err) {
          log(`‚ùå Erro monitorando status: ${err.message}`);
          cleanupSession(nome, qrPath);
        }
      }
    });

    sessions[nome].client = client;

  } catch (err) {
    log(`‚ùå Erro geral: ${err.message}`);
    res.json({ success: false, error: err.message });
    cleanupSession(nome, qrPath);
  } finally {
    delete locks[nome];
  }
}

// Fun√ß√£o para remover sess√£o tempor√°ria e QR code
function cleanupSession(nome, qrPath) {
  if (sessions[nome]) {
    try { if(sessions[nome].client) sessions[nome].client.close(); } catch {}
    delete sessions[nome];
  }
  if (fs.existsSync(qrPath)) fs.unlinkSync(qrPath);
  log(`Sess√£o tempor√°ria "${nome}" removida`);
}

module.exports = { handleQRCode };
